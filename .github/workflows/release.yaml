name: Release to production

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: production-release-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          extensions: http, intl, json, openssl, zip
          php-version: 8.1
          tools: composer:v2

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts

      - name: PHP-CBF
        run: ./vendor/bin/phpcbf src/ --runtime-set ignore_warnings_on_exit true

      - name: PHPCS
        run: ./vendor/bin/phpcs --runtime-set ignore_warnings_on_exit true src

      - name: PHPStan
        run: ./vendor/bin/phpstan analyse -c phpstan.neon -l 6 src/

 #test:
 #  runs-on: ubuntu-latest
 #  steps:
 #    - name: Checkout
 #      uses: actions/checkout@v2

 #    - name: Setup PHP
 #      uses: shivammathur/setup-php@v2
 #      with:
 #        extensions: http, intl, json, openssl, zip
 #        php-version: 8.1
 #        tools: composer:v2

 #    - name: Cache composer dependencies
 #      uses: actions/cache@v1
 #      with:
 #        path: vendor
 #        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
 #        restore-keys: ${{ runner.os }}-composer-

 #    - name: Install Composer dependencies
 #      run: composer install --prefer-dist --no-progress --no-scripts

 #    - name: Create database
 #      run: touch ./test.sqlite && php bin/console doctrine:database:create --env=test && php bin/console doctrine:schema:update --force --env=test

 #    - name: Run Unit Tests
 #      run: vendor/bin/phpunit --testdox

  deploy:
    environment: 'production'
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create SSH key
        shell: bash
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_DEPLOY_KEY }}" > ~/.ssh/private.key
          sudo chmod 600 ~/.ssh/private.key
          ssh-keyscan -H "${{ vars.SSH_DEPLOY_HOST }}" > ~/.ssh/known_hosts
      - name: Pull latest changes
        shell: bash
        run: |
          ssh -i ~/.ssh/private.key  ${{ vars.SSH_DEPLOY_USER }}@${{ vars.SSH_DEPLOY_HOST }} "cd ~/api/ && bin/pull.sh"
